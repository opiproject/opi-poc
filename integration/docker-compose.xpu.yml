version: '3.7'

x-kong-config: &kong-env
  KONG_DATABASE: ${KONG_DATABASE:-off}
  KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
  KONG_PG_HOST: xpu-cpu
  KONG_PG_USER: ${KONG_PG_USER:-kong}
  KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password

services:

  xpu-cpu-ssh:
    image: linuxserver/openssh-server:8.8_p1-r1-ls84
    hostname: xpu-cpu
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
      - PASSWORD_ACCESS=true
      - USER_PASSWORD=123456
      - USER_NAME=xpu
    ports:
      - '2207:2222'
      - "9009:9009"
      # The following are Kong ports
      # The following two environment variables default to an insecure value (0.0.0.0)
      # according to the CIS Security test.
      - "${KONG_INBOUND_PROXY_LISTEN:-0.0.0.0}:8010:8000/tcp"
      - "${KONG_INBOUND_SSL_PROXY_LISTEN:-0.0.0.0}:8443:8443/tcp"
      # Making them mandatory but undefined, like so would be backwards-breaking:
      # - "${KONG_INBOUND_PROXY_LISTEN?Missing inbound proxy host}:8010:8010/tcp"
      # - "${KONG_INBOUND_SSL_PROXY_LISTEN?Missing inbound proxy ssl host}:8443:8443/tcp"
      # Alternative is deactivating check 5.13 in the security bench, if we consider Kong's own config to be enough security here
      - "127.0.0.1:8011:8001/tcp"
      - "127.0.0.1:8444:8444/tcp"
    networks:
      xpu-cpu:
        ipv4_address: 10.127.127.7
      high-speed-external:
        ipv4_address: 10.129.129.7
    healthcheck:
      test: ["CMD-SHELL", "timeout 5 bash -c '</dev/tcp/127.0.0.1/2222'"]
      interval: 6s
      retries: 5
      start_period: 20s
      timeout: 10s

  xpu-cpu:
    build:
      context: xpu-cpu
    depends_on:
      - xpu-cpu-ssh
    volumes_from:
      - xpu-cpu-ssh:rw
    network_mode: service:xpu-cpu-ssh
    command: ['/bin/sh', '-c', 'sleep infinity']
    healthcheck:
      test: cat /proc/1/status || exit 1
      interval: 6s
      retries: 5
      start_period: 20s
      timeout: 10s

  xpu-telegraf:
    image: telegraf:1.22
    volumes:
      - ./xpu-cpu/telegraf-redfish.conf:/etc/telegraf/telegraf.conf:ro
    network_mode: service:xpu-cpu-ssh

  xpu-spdk:
    image: ghcr.io/opiproject/opi-spdk:main
    build:
      context: ../storage
    volumes:
      - /dev/hugepages:/dev/hugepages
      - /dev/shm:/dev/shm
      - /proc:/proc
    privileged: true
    network_mode: service:xpu-cpu-ssh
    command: |
      sh -x -c 'sync; echo 1 > /proc/sys/vm/drop_caches  && \
            echo 1024 > /proc/sys/vm/nr_hugepages && \
            grep "" /sys/kernel/mm/hugepages/hugepages-*/nr_hugepages && \
            /usr/local/bin/spdk_tgt -m 0x1 -s 512 --no-pci 2>&1 & \
            echo wait 5s... && sleep 5s && cd /usr/libexec/spdk/scripts && \
            for i in `seq 1 10`; do ./rpc.py spdk_get_version && break || sleep 1; done  && \
            ./rpc.py bdev_malloc_create -b Malloc0 64 512 && \
            ./rpc.py bdev_malloc_create -b Malloc1 64 512 && \
            echo ./rpc.py bdev_nvme_attach_controller -b opi-bdev -t tcp -a spdk-target -f ipv4 -s 4420 -n nqn.2016-06.io.spdk:cnode1 && \
            ./rpc_http_proxy.py 0.0.0.0 9009 spdkuser spdkpass'
    healthcheck:
      test: ["CMD-SHELL", "curl --fail --insecure --user spdkuser:spdkpass -X POST -H 'Content-Type: application/json' -d '{\"id\": 1, \"method\": \"bdev_get_bdevs\"}' http://localhost:9009 || exit 1"]
      interval: 6s
      retries: 5
      start_period: 20s
      timeout: 10s

  xpu-bmc-ssh:
    image: linuxserver/openssh-server:8.8_p1-r1-ls84
    hostname: xpu-bmc
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
      - PASSWORD_ACCESS=true
      - USER_PASSWORD=123456
      - USER_NAME=bmc
    ports:
      - '2209:2222'
      - '8002:8000'
    networks:
      bmc:
        ipv4_address: 10.128.128.9
    healthcheck:
      test: ["CMD-SHELL", "timeout 5 bash -c '</dev/tcp/127.0.0.1/2222'"]
      interval: 6s
      retries: 5
      start_period: 20s
      timeout: 10s

  xpu-bmc-redfish:
    image: dmtf/redfish-mockup-server:1.1.8
    network_mode: service:xpu-bmc-ssh

  xpu-bmc:
    build:
      context: xpu-bmc
    volumes_from:
      - xpu-bmc-ssh:rw
    network_mode: service:xpu-bmc-ssh
    command: ['/bin/sh', '-c', 'sleep infinity']
    healthcheck:
      test: cat /proc/1/status || exit 1
      interval: 6s
      retries: 5
      start_period: 20s
      timeout: 10s

  kong-migrations:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations bootstrap
    profiles: ["database"]
    depends_on:
      - db
    environment:
      <<: *kong-env
    secrets:
      - kong_postgres_password
    network_mode: service:xpu-cpu-ssh
    restart: on-failure

  kong-migrations-up:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations up && kong migrations finish
    profiles: ["database"]
    depends_on:
      - db
    environment:
      <<: *kong-env
    secrets:
      - kong_postgres_password
    network_mode: service:xpu-cpu-ssh
    restart: on-failure

  kong:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    user: "${KONG_USER:-kong}"
    environment:
      <<: *kong-env
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: "0.0.0.0:8000 reuseport backlog=16384, 0.0.0.0:8443 http2 ssl reuseport backlog=16384"
      KONG_ADMIN_LISTEN: "0.0.0.0:8001 reuseport backlog=16384, 0.0.0.0:8444 http2 ssl reuseport backlog=16384"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PREFIX: ${KONG_PREFIX:-/var/run/kong}
      KONG_DECLARATIVE_CONFIG: "/opt/kong/kong.yaml"
    secrets:
      - kong_postgres_password
    network_mode: service:xpu-cpu-ssh
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure:5
    read_only: true
    volumes:
      - kong_prefix_vol:${KONG_PREFIX:-/var/run/kong}
      - kong_tmp_vol:/tmp
      - ./api/config:/opt/kong
    security_opt:
      - no-new-privileges

  db:
    image: postgres:9.5
    profiles: ["database"]
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
      POSTGRES_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${KONG_PG_USER:-kong}"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    #stdin_open: true
    #tty: true
    network_mode: service:xpu-cpu-ssh
    volumes:
      - kong_data:/var/lib/postgresql/data

networks:
  xpu-cpu:
    external: true
  bmc:
    external: true
  high-speed-external:
    external: true

volumes:
  kong_data: {}
  kong_prefix_vol:
    driver_opts:
     type: tmpfs
     device: tmpfs
  kong_tmp_vol:
    driver_opts:
     type: tmpfs
     device: tmpfs

secrets:
  kong_postgres_password:
    file: ./api/POSTGRES_PASSWORD
