// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: frontend.proto

package opi_storage_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NVMeSubsystemCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeSubsystemCreateRequest) Reset() {
	*x = NVMeSubsystemCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystemCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystemCreateRequest) ProtoMessage() {}

func (x *NVMeSubsystemCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystemCreateRequest.ProtoReflect.Descriptor instead.
func (*NVMeSubsystemCreateRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{0}
}

func (x *NVMeSubsystemCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMeSubsystemCreateRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMeSubsystemCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeSubsystemCreateResponse) Reset() {
	*x = NVMeSubsystemCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystemCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystemCreateResponse) ProtoMessage() {}

func (x *NVMeSubsystemCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystemCreateResponse.ProtoReflect.Descriptor instead.
func (*NVMeSubsystemCreateResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{1}
}

func (x *NVMeSubsystemCreateResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMeSubsystemCreateResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMeSubsystemDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeSubsystemDeleteRequest) Reset() {
	*x = NVMeSubsystemDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystemDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystemDeleteRequest) ProtoMessage() {}

func (x *NVMeSubsystemDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystemDeleteRequest.ProtoReflect.Descriptor instead.
func (*NVMeSubsystemDeleteRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{2}
}

func (x *NVMeSubsystemDeleteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMeSubsystemDeleteRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMeSubsystemDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeSubsystemDeleteResponse) Reset() {
	*x = NVMeSubsystemDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystemDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystemDeleteResponse) ProtoMessage() {}

func (x *NVMeSubsystemDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystemDeleteResponse.ProtoReflect.Descriptor instead.
func (*NVMeSubsystemDeleteResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{3}
}

func (x *NVMeSubsystemDeleteResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMeSubsystemDeleteResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMeSubsystemUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeSubsystemUpdateRequest) Reset() {
	*x = NVMeSubsystemUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystemUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystemUpdateRequest) ProtoMessage() {}

func (x *NVMeSubsystemUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystemUpdateRequest.ProtoReflect.Descriptor instead.
func (*NVMeSubsystemUpdateRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{4}
}

func (x *NVMeSubsystemUpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMeSubsystemUpdateRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMeSubsystemUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeSubsystemUpdateResponse) Reset() {
	*x = NVMeSubsystemUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystemUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystemUpdateResponse) ProtoMessage() {}

func (x *NVMeSubsystemUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystemUpdateResponse.ProtoReflect.Descriptor instead.
func (*NVMeSubsystemUpdateResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{5}
}

func (x *NVMeSubsystemUpdateResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMeSubsystemUpdateResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMeSubsystemListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeSubsystemListRequest) Reset() {
	*x = NVMeSubsystemListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystemListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystemListRequest) ProtoMessage() {}

func (x *NVMeSubsystemListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystemListRequest.ProtoReflect.Descriptor instead.
func (*NVMeSubsystemListRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{6}
}

func (x *NVMeSubsystemListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMeSubsystemListRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMeSubsystemListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeSubsystemListResponse) Reset() {
	*x = NVMeSubsystemListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystemListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystemListResponse) ProtoMessage() {}

func (x *NVMeSubsystemListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystemListResponse.ProtoReflect.Descriptor instead.
func (*NVMeSubsystemListResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{7}
}

func (x *NVMeSubsystemListResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMeSubsystemListResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMeSubsystemGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeSubsystemGetRequest) Reset() {
	*x = NVMeSubsystemGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystemGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystemGetRequest) ProtoMessage() {}

func (x *NVMeSubsystemGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystemGetRequest.ProtoReflect.Descriptor instead.
func (*NVMeSubsystemGetRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{8}
}

func (x *NVMeSubsystemGetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMeSubsystemGetRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMeSubsystemGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeSubsystemGetResponse) Reset() {
	*x = NVMeSubsystemGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystemGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystemGetResponse) ProtoMessage() {}

func (x *NVMeSubsystemGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystemGetResponse.ProtoReflect.Descriptor instead.
func (*NVMeSubsystemGetResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{9}
}

func (x *NVMeSubsystemGetResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMeSubsystemGetResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMeSubsystemStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeSubsystemStatsRequest) Reset() {
	*x = NVMeSubsystemStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystemStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystemStatsRequest) ProtoMessage() {}

func (x *NVMeSubsystemStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystemStatsRequest.ProtoReflect.Descriptor instead.
func (*NVMeSubsystemStatsRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{10}
}

func (x *NVMeSubsystemStatsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMeSubsystemStatsRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMeSubsystemStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeSubsystemStatsResponse) Reset() {
	*x = NVMeSubsystemStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeSubsystemStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeSubsystemStatsResponse) ProtoMessage() {}

func (x *NVMeSubsystemStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeSubsystemStatsResponse.ProtoReflect.Descriptor instead.
func (*NVMeSubsystemStatsResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{11}
}

func (x *NVMeSubsystemStatsResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMeSubsystemStatsResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMeControllerCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeControllerCreateRequest) Reset() {
	*x = NVMeControllerCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeControllerCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeControllerCreateRequest) ProtoMessage() {}

func (x *NVMeControllerCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeControllerCreateRequest.ProtoReflect.Descriptor instead.
func (*NVMeControllerCreateRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{12}
}

func (x *NVMeControllerCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMeControllerCreateRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMeControllerCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeControllerCreateResponse) Reset() {
	*x = NVMeControllerCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeControllerCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeControllerCreateResponse) ProtoMessage() {}

func (x *NVMeControllerCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeControllerCreateResponse.ProtoReflect.Descriptor instead.
func (*NVMeControllerCreateResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{13}
}

func (x *NVMeControllerCreateResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMeControllerCreateResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMeControllerDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeControllerDeleteRequest) Reset() {
	*x = NVMeControllerDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeControllerDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeControllerDeleteRequest) ProtoMessage() {}

func (x *NVMeControllerDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeControllerDeleteRequest.ProtoReflect.Descriptor instead.
func (*NVMeControllerDeleteRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{14}
}

func (x *NVMeControllerDeleteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMeControllerDeleteRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMeControllerDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeControllerDeleteResponse) Reset() {
	*x = NVMeControllerDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeControllerDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeControllerDeleteResponse) ProtoMessage() {}

func (x *NVMeControllerDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeControllerDeleteResponse.ProtoReflect.Descriptor instead.
func (*NVMeControllerDeleteResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{15}
}

func (x *NVMeControllerDeleteResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMeControllerDeleteResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMeControllerUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeControllerUpdateRequest) Reset() {
	*x = NVMeControllerUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeControllerUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeControllerUpdateRequest) ProtoMessage() {}

func (x *NVMeControllerUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeControllerUpdateRequest.ProtoReflect.Descriptor instead.
func (*NVMeControllerUpdateRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{16}
}

func (x *NVMeControllerUpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMeControllerUpdateRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMeControllerUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeControllerUpdateResponse) Reset() {
	*x = NVMeControllerUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeControllerUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeControllerUpdateResponse) ProtoMessage() {}

func (x *NVMeControllerUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeControllerUpdateResponse.ProtoReflect.Descriptor instead.
func (*NVMeControllerUpdateResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{17}
}

func (x *NVMeControllerUpdateResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMeControllerUpdateResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMeControllerListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeControllerListRequest) Reset() {
	*x = NVMeControllerListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeControllerListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeControllerListRequest) ProtoMessage() {}

func (x *NVMeControllerListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeControllerListRequest.ProtoReflect.Descriptor instead.
func (*NVMeControllerListRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{18}
}

func (x *NVMeControllerListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMeControllerListRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMeControllerListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeControllerListResponse) Reset() {
	*x = NVMeControllerListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeControllerListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeControllerListResponse) ProtoMessage() {}

func (x *NVMeControllerListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeControllerListResponse.ProtoReflect.Descriptor instead.
func (*NVMeControllerListResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{19}
}

func (x *NVMeControllerListResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMeControllerListResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMeControllerGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeControllerGetRequest) Reset() {
	*x = NVMeControllerGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeControllerGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeControllerGetRequest) ProtoMessage() {}

func (x *NVMeControllerGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeControllerGetRequest.ProtoReflect.Descriptor instead.
func (*NVMeControllerGetRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{20}
}

func (x *NVMeControllerGetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMeControllerGetRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMeControllerGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeControllerGetResponse) Reset() {
	*x = NVMeControllerGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeControllerGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeControllerGetResponse) ProtoMessage() {}

func (x *NVMeControllerGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeControllerGetResponse.ProtoReflect.Descriptor instead.
func (*NVMeControllerGetResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{21}
}

func (x *NVMeControllerGetResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMeControllerGetResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMeControllerStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeControllerStatsRequest) Reset() {
	*x = NVMeControllerStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeControllerStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeControllerStatsRequest) ProtoMessage() {}

func (x *NVMeControllerStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeControllerStatsRequest.ProtoReflect.Descriptor instead.
func (*NVMeControllerStatsRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{22}
}

func (x *NVMeControllerStatsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMeControllerStatsRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMeControllerStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeControllerStatsResponse) Reset() {
	*x = NVMeControllerStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeControllerStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeControllerStatsResponse) ProtoMessage() {}

func (x *NVMeControllerStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeControllerStatsResponse.ProtoReflect.Descriptor instead.
func (*NVMeControllerStatsResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{23}
}

func (x *NVMeControllerStatsResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMeControllerStatsResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMeNamespaceCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeNamespaceCreateRequest) Reset() {
	*x = NVMeNamespaceCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespaceCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespaceCreateRequest) ProtoMessage() {}

func (x *NVMeNamespaceCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespaceCreateRequest.ProtoReflect.Descriptor instead.
func (*NVMeNamespaceCreateRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{24}
}

func (x *NVMeNamespaceCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMeNamespaceCreateRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMeNamespaceCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeNamespaceCreateResponse) Reset() {
	*x = NVMeNamespaceCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespaceCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespaceCreateResponse) ProtoMessage() {}

func (x *NVMeNamespaceCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespaceCreateResponse.ProtoReflect.Descriptor instead.
func (*NVMeNamespaceCreateResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{25}
}

func (x *NVMeNamespaceCreateResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMeNamespaceCreateResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMeNamespaceDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeNamespaceDeleteRequest) Reset() {
	*x = NVMeNamespaceDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespaceDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespaceDeleteRequest) ProtoMessage() {}

func (x *NVMeNamespaceDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespaceDeleteRequest.ProtoReflect.Descriptor instead.
func (*NVMeNamespaceDeleteRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{26}
}

func (x *NVMeNamespaceDeleteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMeNamespaceDeleteRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMeNamespaceDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeNamespaceDeleteResponse) Reset() {
	*x = NVMeNamespaceDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespaceDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespaceDeleteResponse) ProtoMessage() {}

func (x *NVMeNamespaceDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespaceDeleteResponse.ProtoReflect.Descriptor instead.
func (*NVMeNamespaceDeleteResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{27}
}

func (x *NVMeNamespaceDeleteResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMeNamespaceDeleteResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMeNamespaceUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeNamespaceUpdateRequest) Reset() {
	*x = NVMeNamespaceUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespaceUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespaceUpdateRequest) ProtoMessage() {}

func (x *NVMeNamespaceUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespaceUpdateRequest.ProtoReflect.Descriptor instead.
func (*NVMeNamespaceUpdateRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{28}
}

func (x *NVMeNamespaceUpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMeNamespaceUpdateRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMeNamespaceUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeNamespaceUpdateResponse) Reset() {
	*x = NVMeNamespaceUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespaceUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespaceUpdateResponse) ProtoMessage() {}

func (x *NVMeNamespaceUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespaceUpdateResponse.ProtoReflect.Descriptor instead.
func (*NVMeNamespaceUpdateResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{29}
}

func (x *NVMeNamespaceUpdateResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMeNamespaceUpdateResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMeNamespaceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeNamespaceListRequest) Reset() {
	*x = NVMeNamespaceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespaceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespaceListRequest) ProtoMessage() {}

func (x *NVMeNamespaceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespaceListRequest.ProtoReflect.Descriptor instead.
func (*NVMeNamespaceListRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{30}
}

func (x *NVMeNamespaceListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMeNamespaceListRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMeNamespaceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeNamespaceListResponse) Reset() {
	*x = NVMeNamespaceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespaceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespaceListResponse) ProtoMessage() {}

func (x *NVMeNamespaceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespaceListResponse.ProtoReflect.Descriptor instead.
func (*NVMeNamespaceListResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{31}
}

func (x *NVMeNamespaceListResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMeNamespaceListResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMeNamespaceGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeNamespaceGetRequest) Reset() {
	*x = NVMeNamespaceGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespaceGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespaceGetRequest) ProtoMessage() {}

func (x *NVMeNamespaceGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespaceGetRequest.ProtoReflect.Descriptor instead.
func (*NVMeNamespaceGetRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{32}
}

func (x *NVMeNamespaceGetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMeNamespaceGetRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMeNamespaceGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeNamespaceGetResponse) Reset() {
	*x = NVMeNamespaceGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespaceGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespaceGetResponse) ProtoMessage() {}

func (x *NVMeNamespaceGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespaceGetResponse.ProtoReflect.Descriptor instead.
func (*NVMeNamespaceGetResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{33}
}

func (x *NVMeNamespaceGetResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMeNamespaceGetResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMeNamespaceStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeNamespaceStatsRequest) Reset() {
	*x = NVMeNamespaceStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespaceStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespaceStatsRequest) ProtoMessage() {}

func (x *NVMeNamespaceStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespaceStatsRequest.ProtoReflect.Descriptor instead.
func (*NVMeNamespaceStatsRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{34}
}

func (x *NVMeNamespaceStatsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMeNamespaceStatsRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NVMeNamespaceStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NVMeNamespaceStatsResponse) Reset() {
	*x = NVMeNamespaceStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVMeNamespaceStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVMeNamespaceStatsResponse) ProtoMessage() {}

func (x *NVMeNamespaceStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVMeNamespaceStatsResponse.ProtoReflect.Descriptor instead.
func (*NVMeNamespaceStatsResponse) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{35}
}

func (x *NVMeNamespaceStatsResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NVMeNamespaceStatsResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

var File_frontend_proto protoreflect.FileDescriptor

var file_frontend_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x22, 0x40, 0x0a, 0x1a, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x41, 0x0a, 0x1b, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x40, 0x0a, 0x1a, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x41, 0x0a, 0x1b, 0x4e, 0x56, 0x4d, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x40, 0x0a, 0x1a, 0x4e, 0x56,
	0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x41, 0x0a, 0x1b,
	0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x3e, 0x0a, 0x18, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x3f, 0x0a, 0x19, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x3d, 0x0a, 0x17, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x3e, 0x0a, 0x18, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x3f, 0x0a, 0x19, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x40, 0x0a, 0x1a, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x41, 0x0a, 0x1b, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x42, 0x0a, 0x1c, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x41, 0x0a, 0x1b, 0x4e, 0x56, 0x4d,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x42, 0x0a, 0x1c,
	0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x41, 0x0a, 0x1b, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x42, 0x0a, 0x1c, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3f, 0x0a, 0x19, 0x4e, 0x56, 0x4d, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x40, 0x0a, 0x1a, 0x4e, 0x56, 0x4d, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3e, 0x0a, 0x18, 0x4e, 0x56,
	0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3f, 0x0a, 0x19, 0x4e, 0x56,
	0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x40, 0x0a, 0x1a, 0x4e,
	0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x41, 0x0a,
	0x1b, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x40, 0x0a, 0x1a, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x41, 0x0a, 0x1b, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x40, 0x0a, 0x1a, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x41, 0x0a, 0x1b, 0x4e, 0x56, 0x4d, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x40, 0x0a, 0x1a, 0x4e, 0x56,
	0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x41, 0x0a, 0x1b,
	0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x3e, 0x0a, 0x18, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x3f, 0x0a, 0x19, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x3d, 0x0a, 0x17, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x3e, 0x0a, 0x18, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x3f, 0x0a, 0x19, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x40, 0x0a, 0x1a, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x32, 0xa9, 0x05, 0x0a, 0x0d, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x70, 0x0a, 0x13, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x6f, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x13, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2a, 0x2e,
	0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x13, 0x4e, 0x56, 0x4d, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6f, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x11, 0x4e, 0x56,
	0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x28, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x10, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x65, 0x74, 0x12, 0x27, 0x2e, 0x6f, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6d, 0x0a, 0x12, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xbc,
	0x05, 0x0a, 0x0e, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x12, 0x73, 0x0a, 0x14, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x14, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2b,
	0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6f, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x14, 0x4e,
	0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x6d, 0x0a, 0x12, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6a, 0x0a, 0x11, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x47, 0x65, 0x74, 0x12, 0x28, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x13, 0x4e,
	0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x56, 0x4d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xa9, 0x05,
	0x0a, 0x0d, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x70, 0x0a, 0x13, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x70, 0x0a, 0x13, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x13, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x6f, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x11, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x2e, 0x6f, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x67, 0x0a, 0x10, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x47, 0x65, 0x74, 0x12, 0x27, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x12, 0x4e, 0x56,
	0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x29, 0x2e, 0x6f, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x56, 0x4d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6f, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x56, 0x4d,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x12, 0x5a, 0x10, 0x2e, 0x2f, 0x6f,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_frontend_proto_rawDescOnce sync.Once
	file_frontend_proto_rawDescData = file_frontend_proto_rawDesc
)

func file_frontend_proto_rawDescGZIP() []byte {
	file_frontend_proto_rawDescOnce.Do(func() {
		file_frontend_proto_rawDescData = protoimpl.X.CompressGZIP(file_frontend_proto_rawDescData)
	})
	return file_frontend_proto_rawDescData
}

var file_frontend_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_frontend_proto_goTypes = []interface{}{
	(*NVMeSubsystemCreateRequest)(nil),   // 0: opi.storage.v1.NVMeSubsystemCreateRequest
	(*NVMeSubsystemCreateResponse)(nil),  // 1: opi.storage.v1.NVMeSubsystemCreateResponse
	(*NVMeSubsystemDeleteRequest)(nil),   // 2: opi.storage.v1.NVMeSubsystemDeleteRequest
	(*NVMeSubsystemDeleteResponse)(nil),  // 3: opi.storage.v1.NVMeSubsystemDeleteResponse
	(*NVMeSubsystemUpdateRequest)(nil),   // 4: opi.storage.v1.NVMeSubsystemUpdateRequest
	(*NVMeSubsystemUpdateResponse)(nil),  // 5: opi.storage.v1.NVMeSubsystemUpdateResponse
	(*NVMeSubsystemListRequest)(nil),     // 6: opi.storage.v1.NVMeSubsystemListRequest
	(*NVMeSubsystemListResponse)(nil),    // 7: opi.storage.v1.NVMeSubsystemListResponse
	(*NVMeSubsystemGetRequest)(nil),      // 8: opi.storage.v1.NVMeSubsystemGetRequest
	(*NVMeSubsystemGetResponse)(nil),     // 9: opi.storage.v1.NVMeSubsystemGetResponse
	(*NVMeSubsystemStatsRequest)(nil),    // 10: opi.storage.v1.NVMeSubsystemStatsRequest
	(*NVMeSubsystemStatsResponse)(nil),   // 11: opi.storage.v1.NVMeSubsystemStatsResponse
	(*NVMeControllerCreateRequest)(nil),  // 12: opi.storage.v1.NVMeControllerCreateRequest
	(*NVMeControllerCreateResponse)(nil), // 13: opi.storage.v1.NVMeControllerCreateResponse
	(*NVMeControllerDeleteRequest)(nil),  // 14: opi.storage.v1.NVMeControllerDeleteRequest
	(*NVMeControllerDeleteResponse)(nil), // 15: opi.storage.v1.NVMeControllerDeleteResponse
	(*NVMeControllerUpdateRequest)(nil),  // 16: opi.storage.v1.NVMeControllerUpdateRequest
	(*NVMeControllerUpdateResponse)(nil), // 17: opi.storage.v1.NVMeControllerUpdateResponse
	(*NVMeControllerListRequest)(nil),    // 18: opi.storage.v1.NVMeControllerListRequest
	(*NVMeControllerListResponse)(nil),   // 19: opi.storage.v1.NVMeControllerListResponse
	(*NVMeControllerGetRequest)(nil),     // 20: opi.storage.v1.NVMeControllerGetRequest
	(*NVMeControllerGetResponse)(nil),    // 21: opi.storage.v1.NVMeControllerGetResponse
	(*NVMeControllerStatsRequest)(nil),   // 22: opi.storage.v1.NVMeControllerStatsRequest
	(*NVMeControllerStatsResponse)(nil),  // 23: opi.storage.v1.NVMeControllerStatsResponse
	(*NVMeNamespaceCreateRequest)(nil),   // 24: opi.storage.v1.NVMeNamespaceCreateRequest
	(*NVMeNamespaceCreateResponse)(nil),  // 25: opi.storage.v1.NVMeNamespaceCreateResponse
	(*NVMeNamespaceDeleteRequest)(nil),   // 26: opi.storage.v1.NVMeNamespaceDeleteRequest
	(*NVMeNamespaceDeleteResponse)(nil),  // 27: opi.storage.v1.NVMeNamespaceDeleteResponse
	(*NVMeNamespaceUpdateRequest)(nil),   // 28: opi.storage.v1.NVMeNamespaceUpdateRequest
	(*NVMeNamespaceUpdateResponse)(nil),  // 29: opi.storage.v1.NVMeNamespaceUpdateResponse
	(*NVMeNamespaceListRequest)(nil),     // 30: opi.storage.v1.NVMeNamespaceListRequest
	(*NVMeNamespaceListResponse)(nil),    // 31: opi.storage.v1.NVMeNamespaceListResponse
	(*NVMeNamespaceGetRequest)(nil),      // 32: opi.storage.v1.NVMeNamespaceGetRequest
	(*NVMeNamespaceGetResponse)(nil),     // 33: opi.storage.v1.NVMeNamespaceGetResponse
	(*NVMeNamespaceStatsRequest)(nil),    // 34: opi.storage.v1.NVMeNamespaceStatsRequest
	(*NVMeNamespaceStatsResponse)(nil),   // 35: opi.storage.v1.NVMeNamespaceStatsResponse
}
var file_frontend_proto_depIdxs = []int32{
	0,  // 0: opi.storage.v1.NVMeSubsystem.NVMeSubsystemCreate:input_type -> opi.storage.v1.NVMeSubsystemCreateRequest
	2,  // 1: opi.storage.v1.NVMeSubsystem.NVMeSubsystemDelete:input_type -> opi.storage.v1.NVMeSubsystemDeleteRequest
	4,  // 2: opi.storage.v1.NVMeSubsystem.NVMeSubsystemUpdate:input_type -> opi.storage.v1.NVMeSubsystemUpdateRequest
	6,  // 3: opi.storage.v1.NVMeSubsystem.NVMeSubsystemList:input_type -> opi.storage.v1.NVMeSubsystemListRequest
	8,  // 4: opi.storage.v1.NVMeSubsystem.NVMeSubsystemGet:input_type -> opi.storage.v1.NVMeSubsystemGetRequest
	10, // 5: opi.storage.v1.NVMeSubsystem.NVMeSubsystemStats:input_type -> opi.storage.v1.NVMeSubsystemStatsRequest
	12, // 6: opi.storage.v1.NVMeController.NVMeControllerCreate:input_type -> opi.storage.v1.NVMeControllerCreateRequest
	14, // 7: opi.storage.v1.NVMeController.NVMeControllerDelete:input_type -> opi.storage.v1.NVMeControllerDeleteRequest
	16, // 8: opi.storage.v1.NVMeController.NVMeControllerUpdate:input_type -> opi.storage.v1.NVMeControllerUpdateRequest
	18, // 9: opi.storage.v1.NVMeController.NVMeControllerList:input_type -> opi.storage.v1.NVMeControllerListRequest
	20, // 10: opi.storage.v1.NVMeController.NVMeControllerGet:input_type -> opi.storage.v1.NVMeControllerGetRequest
	22, // 11: opi.storage.v1.NVMeController.NVMeControllerStats:input_type -> opi.storage.v1.NVMeControllerStatsRequest
	24, // 12: opi.storage.v1.NVMeNamespace.NVMeNamespaceCreate:input_type -> opi.storage.v1.NVMeNamespaceCreateRequest
	26, // 13: opi.storage.v1.NVMeNamespace.NVMeNamespaceDelete:input_type -> opi.storage.v1.NVMeNamespaceDeleteRequest
	28, // 14: opi.storage.v1.NVMeNamespace.NVMeNamespaceUpdate:input_type -> opi.storage.v1.NVMeNamespaceUpdateRequest
	30, // 15: opi.storage.v1.NVMeNamespace.NVMeNamespaceList:input_type -> opi.storage.v1.NVMeNamespaceListRequest
	32, // 16: opi.storage.v1.NVMeNamespace.NVMeNamespaceGet:input_type -> opi.storage.v1.NVMeNamespaceGetRequest
	34, // 17: opi.storage.v1.NVMeNamespace.NVMeNamespaceStats:input_type -> opi.storage.v1.NVMeNamespaceStatsRequest
	1,  // 18: opi.storage.v1.NVMeSubsystem.NVMeSubsystemCreate:output_type -> opi.storage.v1.NVMeSubsystemCreateResponse
	3,  // 19: opi.storage.v1.NVMeSubsystem.NVMeSubsystemDelete:output_type -> opi.storage.v1.NVMeSubsystemDeleteResponse
	5,  // 20: opi.storage.v1.NVMeSubsystem.NVMeSubsystemUpdate:output_type -> opi.storage.v1.NVMeSubsystemUpdateResponse
	7,  // 21: opi.storage.v1.NVMeSubsystem.NVMeSubsystemList:output_type -> opi.storage.v1.NVMeSubsystemListResponse
	9,  // 22: opi.storage.v1.NVMeSubsystem.NVMeSubsystemGet:output_type -> opi.storage.v1.NVMeSubsystemGetResponse
	11, // 23: opi.storage.v1.NVMeSubsystem.NVMeSubsystemStats:output_type -> opi.storage.v1.NVMeSubsystemStatsResponse
	13, // 24: opi.storage.v1.NVMeController.NVMeControllerCreate:output_type -> opi.storage.v1.NVMeControllerCreateResponse
	15, // 25: opi.storage.v1.NVMeController.NVMeControllerDelete:output_type -> opi.storage.v1.NVMeControllerDeleteResponse
	17, // 26: opi.storage.v1.NVMeController.NVMeControllerUpdate:output_type -> opi.storage.v1.NVMeControllerUpdateResponse
	19, // 27: opi.storage.v1.NVMeController.NVMeControllerList:output_type -> opi.storage.v1.NVMeControllerListResponse
	21, // 28: opi.storage.v1.NVMeController.NVMeControllerGet:output_type -> opi.storage.v1.NVMeControllerGetResponse
	23, // 29: opi.storage.v1.NVMeController.NVMeControllerStats:output_type -> opi.storage.v1.NVMeControllerStatsResponse
	25, // 30: opi.storage.v1.NVMeNamespace.NVMeNamespaceCreate:output_type -> opi.storage.v1.NVMeNamespaceCreateResponse
	27, // 31: opi.storage.v1.NVMeNamespace.NVMeNamespaceDelete:output_type -> opi.storage.v1.NVMeNamespaceDeleteResponse
	29, // 32: opi.storage.v1.NVMeNamespace.NVMeNamespaceUpdate:output_type -> opi.storage.v1.NVMeNamespaceUpdateResponse
	31, // 33: opi.storage.v1.NVMeNamespace.NVMeNamespaceList:output_type -> opi.storage.v1.NVMeNamespaceListResponse
	33, // 34: opi.storage.v1.NVMeNamespace.NVMeNamespaceGet:output_type -> opi.storage.v1.NVMeNamespaceGetResponse
	35, // 35: opi.storage.v1.NVMeNamespace.NVMeNamespaceStats:output_type -> opi.storage.v1.NVMeNamespaceStatsResponse
	18, // [18:36] is the sub-list for method output_type
	0,  // [0:18] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_frontend_proto_init() }
func file_frontend_proto_init() {
	if File_frontend_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_frontend_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystemCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystemCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystemDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystemDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystemUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystemUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystemListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystemListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystemGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystemGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystemStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeSubsystemStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeControllerCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeControllerCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeControllerDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeControllerDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeControllerUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeControllerUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeControllerListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeControllerListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeControllerGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeControllerGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeControllerStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeControllerStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespaceCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespaceCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespaceDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespaceDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespaceUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespaceUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespaceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespaceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespaceGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespaceGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespaceStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVMeNamespaceStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_frontend_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_frontend_proto_goTypes,
		DependencyIndexes: file_frontend_proto_depIdxs,
		MessageInfos:      file_frontend_proto_msgTypes,
	}.Build()
	File_frontend_proto = out.File
	file_frontend_proto_rawDesc = nil
	file_frontend_proto_goTypes = nil
	file_frontend_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NVMeSubsystemClient is the client API for NVMeSubsystem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NVMeSubsystemClient interface {
	NVMeSubsystemCreate(ctx context.Context, in *NVMeSubsystemCreateRequest, opts ...grpc.CallOption) (*NVMeSubsystemCreateResponse, error)
	NVMeSubsystemDelete(ctx context.Context, in *NVMeSubsystemDeleteRequest, opts ...grpc.CallOption) (*NVMeSubsystemDeleteResponse, error)
	NVMeSubsystemUpdate(ctx context.Context, in *NVMeSubsystemUpdateRequest, opts ...grpc.CallOption) (*NVMeSubsystemUpdateResponse, error)
	NVMeSubsystemList(ctx context.Context, in *NVMeSubsystemListRequest, opts ...grpc.CallOption) (*NVMeSubsystemListResponse, error)
	NVMeSubsystemGet(ctx context.Context, in *NVMeSubsystemGetRequest, opts ...grpc.CallOption) (*NVMeSubsystemGetResponse, error)
	NVMeSubsystemStats(ctx context.Context, in *NVMeSubsystemStatsRequest, opts ...grpc.CallOption) (*NVMeSubsystemStatsResponse, error)
}

type nVMeSubsystemClient struct {
	cc grpc.ClientConnInterface
}

func NewNVMeSubsystemClient(cc grpc.ClientConnInterface) NVMeSubsystemClient {
	return &nVMeSubsystemClient{cc}
}

func (c *nVMeSubsystemClient) NVMeSubsystemCreate(ctx context.Context, in *NVMeSubsystemCreateRequest, opts ...grpc.CallOption) (*NVMeSubsystemCreateResponse, error) {
	out := new(NVMeSubsystemCreateResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.NVMeSubsystem/NVMeSubsystemCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMeSubsystemClient) NVMeSubsystemDelete(ctx context.Context, in *NVMeSubsystemDeleteRequest, opts ...grpc.CallOption) (*NVMeSubsystemDeleteResponse, error) {
	out := new(NVMeSubsystemDeleteResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.NVMeSubsystem/NVMeSubsystemDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMeSubsystemClient) NVMeSubsystemUpdate(ctx context.Context, in *NVMeSubsystemUpdateRequest, opts ...grpc.CallOption) (*NVMeSubsystemUpdateResponse, error) {
	out := new(NVMeSubsystemUpdateResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.NVMeSubsystem/NVMeSubsystemUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMeSubsystemClient) NVMeSubsystemList(ctx context.Context, in *NVMeSubsystemListRequest, opts ...grpc.CallOption) (*NVMeSubsystemListResponse, error) {
	out := new(NVMeSubsystemListResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.NVMeSubsystem/NVMeSubsystemList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMeSubsystemClient) NVMeSubsystemGet(ctx context.Context, in *NVMeSubsystemGetRequest, opts ...grpc.CallOption) (*NVMeSubsystemGetResponse, error) {
	out := new(NVMeSubsystemGetResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.NVMeSubsystem/NVMeSubsystemGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMeSubsystemClient) NVMeSubsystemStats(ctx context.Context, in *NVMeSubsystemStatsRequest, opts ...grpc.CallOption) (*NVMeSubsystemStatsResponse, error) {
	out := new(NVMeSubsystemStatsResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.NVMeSubsystem/NVMeSubsystemStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NVMeSubsystemServer is the server API for NVMeSubsystem service.
type NVMeSubsystemServer interface {
	NVMeSubsystemCreate(context.Context, *NVMeSubsystemCreateRequest) (*NVMeSubsystemCreateResponse, error)
	NVMeSubsystemDelete(context.Context, *NVMeSubsystemDeleteRequest) (*NVMeSubsystemDeleteResponse, error)
	NVMeSubsystemUpdate(context.Context, *NVMeSubsystemUpdateRequest) (*NVMeSubsystemUpdateResponse, error)
	NVMeSubsystemList(context.Context, *NVMeSubsystemListRequest) (*NVMeSubsystemListResponse, error)
	NVMeSubsystemGet(context.Context, *NVMeSubsystemGetRequest) (*NVMeSubsystemGetResponse, error)
	NVMeSubsystemStats(context.Context, *NVMeSubsystemStatsRequest) (*NVMeSubsystemStatsResponse, error)
}

// UnimplementedNVMeSubsystemServer can be embedded to have forward compatible implementations.
type UnimplementedNVMeSubsystemServer struct {
}

func (*UnimplementedNVMeSubsystemServer) NVMeSubsystemCreate(context.Context, *NVMeSubsystemCreateRequest) (*NVMeSubsystemCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeSubsystemCreate not implemented")
}
func (*UnimplementedNVMeSubsystemServer) NVMeSubsystemDelete(context.Context, *NVMeSubsystemDeleteRequest) (*NVMeSubsystemDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeSubsystemDelete not implemented")
}
func (*UnimplementedNVMeSubsystemServer) NVMeSubsystemUpdate(context.Context, *NVMeSubsystemUpdateRequest) (*NVMeSubsystemUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeSubsystemUpdate not implemented")
}
func (*UnimplementedNVMeSubsystemServer) NVMeSubsystemList(context.Context, *NVMeSubsystemListRequest) (*NVMeSubsystemListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeSubsystemList not implemented")
}
func (*UnimplementedNVMeSubsystemServer) NVMeSubsystemGet(context.Context, *NVMeSubsystemGetRequest) (*NVMeSubsystemGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeSubsystemGet not implemented")
}
func (*UnimplementedNVMeSubsystemServer) NVMeSubsystemStats(context.Context, *NVMeSubsystemStatsRequest) (*NVMeSubsystemStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeSubsystemStats not implemented")
}

func RegisterNVMeSubsystemServer(s *grpc.Server, srv NVMeSubsystemServer) {
	s.RegisterService(&_NVMeSubsystem_serviceDesc, srv)
}

func _NVMeSubsystem_NVMeSubsystemCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeSubsystemCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMeSubsystemServer).NVMeSubsystemCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.NVMeSubsystem/NVMeSubsystemCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMeSubsystemServer).NVMeSubsystemCreate(ctx, req.(*NVMeSubsystemCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMeSubsystem_NVMeSubsystemDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeSubsystemDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMeSubsystemServer).NVMeSubsystemDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.NVMeSubsystem/NVMeSubsystemDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMeSubsystemServer).NVMeSubsystemDelete(ctx, req.(*NVMeSubsystemDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMeSubsystem_NVMeSubsystemUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeSubsystemUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMeSubsystemServer).NVMeSubsystemUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.NVMeSubsystem/NVMeSubsystemUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMeSubsystemServer).NVMeSubsystemUpdate(ctx, req.(*NVMeSubsystemUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMeSubsystem_NVMeSubsystemList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeSubsystemListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMeSubsystemServer).NVMeSubsystemList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.NVMeSubsystem/NVMeSubsystemList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMeSubsystemServer).NVMeSubsystemList(ctx, req.(*NVMeSubsystemListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMeSubsystem_NVMeSubsystemGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeSubsystemGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMeSubsystemServer).NVMeSubsystemGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.NVMeSubsystem/NVMeSubsystemGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMeSubsystemServer).NVMeSubsystemGet(ctx, req.(*NVMeSubsystemGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMeSubsystem_NVMeSubsystemStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeSubsystemStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMeSubsystemServer).NVMeSubsystemStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.NVMeSubsystem/NVMeSubsystemStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMeSubsystemServer).NVMeSubsystemStats(ctx, req.(*NVMeSubsystemStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NVMeSubsystem_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opi.storage.v1.NVMeSubsystem",
	HandlerType: (*NVMeSubsystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NVMeSubsystemCreate",
			Handler:    _NVMeSubsystem_NVMeSubsystemCreate_Handler,
		},
		{
			MethodName: "NVMeSubsystemDelete",
			Handler:    _NVMeSubsystem_NVMeSubsystemDelete_Handler,
		},
		{
			MethodName: "NVMeSubsystemUpdate",
			Handler:    _NVMeSubsystem_NVMeSubsystemUpdate_Handler,
		},
		{
			MethodName: "NVMeSubsystemList",
			Handler:    _NVMeSubsystem_NVMeSubsystemList_Handler,
		},
		{
			MethodName: "NVMeSubsystemGet",
			Handler:    _NVMeSubsystem_NVMeSubsystemGet_Handler,
		},
		{
			MethodName: "NVMeSubsystemStats",
			Handler:    _NVMeSubsystem_NVMeSubsystemStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "frontend.proto",
}

// NVMeControllerClient is the client API for NVMeController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NVMeControllerClient interface {
	NVMeControllerCreate(ctx context.Context, in *NVMeControllerCreateRequest, opts ...grpc.CallOption) (*NVMeControllerCreateResponse, error)
	NVMeControllerDelete(ctx context.Context, in *NVMeControllerDeleteRequest, opts ...grpc.CallOption) (*NVMeControllerDeleteResponse, error)
	NVMeControllerUpdate(ctx context.Context, in *NVMeControllerUpdateRequest, opts ...grpc.CallOption) (*NVMeControllerUpdateResponse, error)
	NVMeControllerList(ctx context.Context, in *NVMeControllerListRequest, opts ...grpc.CallOption) (*NVMeControllerListResponse, error)
	NVMeControllerGet(ctx context.Context, in *NVMeControllerGetRequest, opts ...grpc.CallOption) (*NVMeControllerGetResponse, error)
	NVMeControllerStats(ctx context.Context, in *NVMeControllerStatsRequest, opts ...grpc.CallOption) (*NVMeControllerStatsResponse, error)
}

type nVMeControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewNVMeControllerClient(cc grpc.ClientConnInterface) NVMeControllerClient {
	return &nVMeControllerClient{cc}
}

func (c *nVMeControllerClient) NVMeControllerCreate(ctx context.Context, in *NVMeControllerCreateRequest, opts ...grpc.CallOption) (*NVMeControllerCreateResponse, error) {
	out := new(NVMeControllerCreateResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.NVMeController/NVMeControllerCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMeControllerClient) NVMeControllerDelete(ctx context.Context, in *NVMeControllerDeleteRequest, opts ...grpc.CallOption) (*NVMeControllerDeleteResponse, error) {
	out := new(NVMeControllerDeleteResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.NVMeController/NVMeControllerDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMeControllerClient) NVMeControllerUpdate(ctx context.Context, in *NVMeControllerUpdateRequest, opts ...grpc.CallOption) (*NVMeControllerUpdateResponse, error) {
	out := new(NVMeControllerUpdateResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.NVMeController/NVMeControllerUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMeControllerClient) NVMeControllerList(ctx context.Context, in *NVMeControllerListRequest, opts ...grpc.CallOption) (*NVMeControllerListResponse, error) {
	out := new(NVMeControllerListResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.NVMeController/NVMeControllerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMeControllerClient) NVMeControllerGet(ctx context.Context, in *NVMeControllerGetRequest, opts ...grpc.CallOption) (*NVMeControllerGetResponse, error) {
	out := new(NVMeControllerGetResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.NVMeController/NVMeControllerGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMeControllerClient) NVMeControllerStats(ctx context.Context, in *NVMeControllerStatsRequest, opts ...grpc.CallOption) (*NVMeControllerStatsResponse, error) {
	out := new(NVMeControllerStatsResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.NVMeController/NVMeControllerStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NVMeControllerServer is the server API for NVMeController service.
type NVMeControllerServer interface {
	NVMeControllerCreate(context.Context, *NVMeControllerCreateRequest) (*NVMeControllerCreateResponse, error)
	NVMeControllerDelete(context.Context, *NVMeControllerDeleteRequest) (*NVMeControllerDeleteResponse, error)
	NVMeControllerUpdate(context.Context, *NVMeControllerUpdateRequest) (*NVMeControllerUpdateResponse, error)
	NVMeControllerList(context.Context, *NVMeControllerListRequest) (*NVMeControllerListResponse, error)
	NVMeControllerGet(context.Context, *NVMeControllerGetRequest) (*NVMeControllerGetResponse, error)
	NVMeControllerStats(context.Context, *NVMeControllerStatsRequest) (*NVMeControllerStatsResponse, error)
}

// UnimplementedNVMeControllerServer can be embedded to have forward compatible implementations.
type UnimplementedNVMeControllerServer struct {
}

func (*UnimplementedNVMeControllerServer) NVMeControllerCreate(context.Context, *NVMeControllerCreateRequest) (*NVMeControllerCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeControllerCreate not implemented")
}
func (*UnimplementedNVMeControllerServer) NVMeControllerDelete(context.Context, *NVMeControllerDeleteRequest) (*NVMeControllerDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeControllerDelete not implemented")
}
func (*UnimplementedNVMeControllerServer) NVMeControllerUpdate(context.Context, *NVMeControllerUpdateRequest) (*NVMeControllerUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeControllerUpdate not implemented")
}
func (*UnimplementedNVMeControllerServer) NVMeControllerList(context.Context, *NVMeControllerListRequest) (*NVMeControllerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeControllerList not implemented")
}
func (*UnimplementedNVMeControllerServer) NVMeControllerGet(context.Context, *NVMeControllerGetRequest) (*NVMeControllerGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeControllerGet not implemented")
}
func (*UnimplementedNVMeControllerServer) NVMeControllerStats(context.Context, *NVMeControllerStatsRequest) (*NVMeControllerStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeControllerStats not implemented")
}

func RegisterNVMeControllerServer(s *grpc.Server, srv NVMeControllerServer) {
	s.RegisterService(&_NVMeController_serviceDesc, srv)
}

func _NVMeController_NVMeControllerCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeControllerCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMeControllerServer).NVMeControllerCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.NVMeController/NVMeControllerCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMeControllerServer).NVMeControllerCreate(ctx, req.(*NVMeControllerCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMeController_NVMeControllerDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeControllerDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMeControllerServer).NVMeControllerDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.NVMeController/NVMeControllerDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMeControllerServer).NVMeControllerDelete(ctx, req.(*NVMeControllerDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMeController_NVMeControllerUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeControllerUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMeControllerServer).NVMeControllerUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.NVMeController/NVMeControllerUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMeControllerServer).NVMeControllerUpdate(ctx, req.(*NVMeControllerUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMeController_NVMeControllerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeControllerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMeControllerServer).NVMeControllerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.NVMeController/NVMeControllerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMeControllerServer).NVMeControllerList(ctx, req.(*NVMeControllerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMeController_NVMeControllerGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeControllerGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMeControllerServer).NVMeControllerGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.NVMeController/NVMeControllerGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMeControllerServer).NVMeControllerGet(ctx, req.(*NVMeControllerGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMeController_NVMeControllerStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeControllerStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMeControllerServer).NVMeControllerStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.NVMeController/NVMeControllerStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMeControllerServer).NVMeControllerStats(ctx, req.(*NVMeControllerStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NVMeController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opi.storage.v1.NVMeController",
	HandlerType: (*NVMeControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NVMeControllerCreate",
			Handler:    _NVMeController_NVMeControllerCreate_Handler,
		},
		{
			MethodName: "NVMeControllerDelete",
			Handler:    _NVMeController_NVMeControllerDelete_Handler,
		},
		{
			MethodName: "NVMeControllerUpdate",
			Handler:    _NVMeController_NVMeControllerUpdate_Handler,
		},
		{
			MethodName: "NVMeControllerList",
			Handler:    _NVMeController_NVMeControllerList_Handler,
		},
		{
			MethodName: "NVMeControllerGet",
			Handler:    _NVMeController_NVMeControllerGet_Handler,
		},
		{
			MethodName: "NVMeControllerStats",
			Handler:    _NVMeController_NVMeControllerStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "frontend.proto",
}

// NVMeNamespaceClient is the client API for NVMeNamespace service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NVMeNamespaceClient interface {
	NVMeNamespaceCreate(ctx context.Context, in *NVMeNamespaceCreateRequest, opts ...grpc.CallOption) (*NVMeNamespaceCreateResponse, error)
	NVMeNamespaceDelete(ctx context.Context, in *NVMeNamespaceDeleteRequest, opts ...grpc.CallOption) (*NVMeNamespaceDeleteResponse, error)
	NVMeNamespaceUpdate(ctx context.Context, in *NVMeNamespaceUpdateRequest, opts ...grpc.CallOption) (*NVMeNamespaceUpdateResponse, error)
	NVMeNamespaceList(ctx context.Context, in *NVMeNamespaceListRequest, opts ...grpc.CallOption) (*NVMeNamespaceListResponse, error)
	NVMeNamespaceGet(ctx context.Context, in *NVMeNamespaceGetRequest, opts ...grpc.CallOption) (*NVMeNamespaceGetResponse, error)
	NVMeNamespaceStats(ctx context.Context, in *NVMeNamespaceStatsRequest, opts ...grpc.CallOption) (*NVMeNamespaceStatsResponse, error)
}

type nVMeNamespaceClient struct {
	cc grpc.ClientConnInterface
}

func NewNVMeNamespaceClient(cc grpc.ClientConnInterface) NVMeNamespaceClient {
	return &nVMeNamespaceClient{cc}
}

func (c *nVMeNamespaceClient) NVMeNamespaceCreate(ctx context.Context, in *NVMeNamespaceCreateRequest, opts ...grpc.CallOption) (*NVMeNamespaceCreateResponse, error) {
	out := new(NVMeNamespaceCreateResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.NVMeNamespace/NVMeNamespaceCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMeNamespaceClient) NVMeNamespaceDelete(ctx context.Context, in *NVMeNamespaceDeleteRequest, opts ...grpc.CallOption) (*NVMeNamespaceDeleteResponse, error) {
	out := new(NVMeNamespaceDeleteResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.NVMeNamespace/NVMeNamespaceDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMeNamespaceClient) NVMeNamespaceUpdate(ctx context.Context, in *NVMeNamespaceUpdateRequest, opts ...grpc.CallOption) (*NVMeNamespaceUpdateResponse, error) {
	out := new(NVMeNamespaceUpdateResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.NVMeNamespace/NVMeNamespaceUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMeNamespaceClient) NVMeNamespaceList(ctx context.Context, in *NVMeNamespaceListRequest, opts ...grpc.CallOption) (*NVMeNamespaceListResponse, error) {
	out := new(NVMeNamespaceListResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.NVMeNamespace/NVMeNamespaceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMeNamespaceClient) NVMeNamespaceGet(ctx context.Context, in *NVMeNamespaceGetRequest, opts ...grpc.CallOption) (*NVMeNamespaceGetResponse, error) {
	out := new(NVMeNamespaceGetResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.NVMeNamespace/NVMeNamespaceGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nVMeNamespaceClient) NVMeNamespaceStats(ctx context.Context, in *NVMeNamespaceStatsRequest, opts ...grpc.CallOption) (*NVMeNamespaceStatsResponse, error) {
	out := new(NVMeNamespaceStatsResponse)
	err := c.cc.Invoke(ctx, "/opi.storage.v1.NVMeNamespace/NVMeNamespaceStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NVMeNamespaceServer is the server API for NVMeNamespace service.
type NVMeNamespaceServer interface {
	NVMeNamespaceCreate(context.Context, *NVMeNamespaceCreateRequest) (*NVMeNamespaceCreateResponse, error)
	NVMeNamespaceDelete(context.Context, *NVMeNamespaceDeleteRequest) (*NVMeNamespaceDeleteResponse, error)
	NVMeNamespaceUpdate(context.Context, *NVMeNamespaceUpdateRequest) (*NVMeNamespaceUpdateResponse, error)
	NVMeNamespaceList(context.Context, *NVMeNamespaceListRequest) (*NVMeNamespaceListResponse, error)
	NVMeNamespaceGet(context.Context, *NVMeNamespaceGetRequest) (*NVMeNamespaceGetResponse, error)
	NVMeNamespaceStats(context.Context, *NVMeNamespaceStatsRequest) (*NVMeNamespaceStatsResponse, error)
}

// UnimplementedNVMeNamespaceServer can be embedded to have forward compatible implementations.
type UnimplementedNVMeNamespaceServer struct {
}

func (*UnimplementedNVMeNamespaceServer) NVMeNamespaceCreate(context.Context, *NVMeNamespaceCreateRequest) (*NVMeNamespaceCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeNamespaceCreate not implemented")
}
func (*UnimplementedNVMeNamespaceServer) NVMeNamespaceDelete(context.Context, *NVMeNamespaceDeleteRequest) (*NVMeNamespaceDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeNamespaceDelete not implemented")
}
func (*UnimplementedNVMeNamespaceServer) NVMeNamespaceUpdate(context.Context, *NVMeNamespaceUpdateRequest) (*NVMeNamespaceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeNamespaceUpdate not implemented")
}
func (*UnimplementedNVMeNamespaceServer) NVMeNamespaceList(context.Context, *NVMeNamespaceListRequest) (*NVMeNamespaceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeNamespaceList not implemented")
}
func (*UnimplementedNVMeNamespaceServer) NVMeNamespaceGet(context.Context, *NVMeNamespaceGetRequest) (*NVMeNamespaceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeNamespaceGet not implemented")
}
func (*UnimplementedNVMeNamespaceServer) NVMeNamespaceStats(context.Context, *NVMeNamespaceStatsRequest) (*NVMeNamespaceStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NVMeNamespaceStats not implemented")
}

func RegisterNVMeNamespaceServer(s *grpc.Server, srv NVMeNamespaceServer) {
	s.RegisterService(&_NVMeNamespace_serviceDesc, srv)
}

func _NVMeNamespace_NVMeNamespaceCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeNamespaceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMeNamespaceServer).NVMeNamespaceCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.NVMeNamespace/NVMeNamespaceCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMeNamespaceServer).NVMeNamespaceCreate(ctx, req.(*NVMeNamespaceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMeNamespace_NVMeNamespaceDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeNamespaceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMeNamespaceServer).NVMeNamespaceDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.NVMeNamespace/NVMeNamespaceDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMeNamespaceServer).NVMeNamespaceDelete(ctx, req.(*NVMeNamespaceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMeNamespace_NVMeNamespaceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeNamespaceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMeNamespaceServer).NVMeNamespaceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.NVMeNamespace/NVMeNamespaceUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMeNamespaceServer).NVMeNamespaceUpdate(ctx, req.(*NVMeNamespaceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMeNamespace_NVMeNamespaceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeNamespaceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMeNamespaceServer).NVMeNamespaceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.NVMeNamespace/NVMeNamespaceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMeNamespaceServer).NVMeNamespaceList(ctx, req.(*NVMeNamespaceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMeNamespace_NVMeNamespaceGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeNamespaceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMeNamespaceServer).NVMeNamespaceGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.NVMeNamespace/NVMeNamespaceGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMeNamespaceServer).NVMeNamespaceGet(ctx, req.(*NVMeNamespaceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NVMeNamespace_NVMeNamespaceStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NVMeNamespaceStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NVMeNamespaceServer).NVMeNamespaceStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opi.storage.v1.NVMeNamespace/NVMeNamespaceStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NVMeNamespaceServer).NVMeNamespaceStats(ctx, req.(*NVMeNamespaceStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NVMeNamespace_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opi.storage.v1.NVMeNamespace",
	HandlerType: (*NVMeNamespaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NVMeNamespaceCreate",
			Handler:    _NVMeNamespace_NVMeNamespaceCreate_Handler,
		},
		{
			MethodName: "NVMeNamespaceDelete",
			Handler:    _NVMeNamespace_NVMeNamespaceDelete_Handler,
		},
		{
			MethodName: "NVMeNamespaceUpdate",
			Handler:    _NVMeNamespace_NVMeNamespaceUpdate_Handler,
		},
		{
			MethodName: "NVMeNamespaceList",
			Handler:    _NVMeNamespace_NVMeNamespaceList_Handler,
		},
		{
			MethodName: "NVMeNamespaceGet",
			Handler:    _NVMeNamespace_NVMeNamespaceGet_Handler,
		},
		{
			MethodName: "NVMeNamespaceStats",
			Handler:    _NVMeNamespace_NVMeNamespaceStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "frontend.proto",
}
